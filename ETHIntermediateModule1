// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Functions {
    address public owner;
    uint256 public value;

    constructor() {
        owner = msg.sender;
    }

    function setValue(uint256 _newValue) external onlyOwner {
        require(_newValue != 0, "The new value cannot be zero");
        value = _newValue;
    }

    function assertFunction(uint256 _num) external pure returns (uint256) {
        assert(_num != 0);
        return _num;
    }

    function revertFunction(uint256 _num) external pure returns (uint256) {
        require(_num != 0, "The number cannot be zero");
        return _num;
    }

    function retrieve() external view returns (uint256) {
        return value;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }
}
